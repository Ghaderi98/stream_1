# -*- coding: utf-8 -*-
"""stream_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P7Qt_rb8EXgujas6frCxtTgl9Bi3E9EB
"""

import streamlit as st
import yfinance as yf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
import numpy as np
import matplotlib.pyplot as plt


def get_stock_data(symbol):
    stock_data = yf.download(symbol)
    return stock_data


def train_lstm(data):
    # پیاده‌سازی مدل LSTM با لایه‌بندی
    model = Sequential()
    model.add(LSTM(units=50, return_sequences=True, input_shape=(None, 1)))
    model.add(LSTM(units=50, return_sequences=True))
    model.add(LSTM(units=50))
    model.add(Dense(units=1))
    model.compile(optimizer='adam', loss='mean_squared_error')

    # آموزش مدل با داده‌های آموزشی
    # ...

    return model


def predict_lstm(model, data):
    # تبدیل داده‌ها به آرایه numpy
    data = np.array(data)

    # تغییر شکل داده‌ها برای ورودی LSTM
    data = np.reshape(data, (data.shape[0], data.shape[1], 1))

    # پیش‌بینی با استفاده از مدل LSTM
    predictions = model.predict(data)

    return predictions


def plot_stock_data(stock_data, prediction_data):
    plt.figure(figsize=(12, 6))
    plt.plot(stock_data.index, stock_data['Close'], label='Actual')
    plt.plot(prediction_data.index, prediction_data['Close'], label='Predicted')
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.title('Stock Price Prediction')
    plt.legend()
    st.pyplot()


def main():
    st.title("Stock Prediction App")

    symbol = st.text_input("Enter stock symbol (e.g., AAPL for Apple):")
    if not symbol:
        st.warning("Please enter a stock symbol.")
        return

    days = st.number_input("Enter the number of days for prediction:", min_value=1, max_value=30, value=1)

    click_counter = st.session_state.get('click_counter', 0)

    if st.button("Predict", key='predict_button'):
        click_counter += 1
        st.session_state['click_counter'] = click_counter

        st.write("Fetching stock data...")
        stock_data = get_stock_data(symbol)

        if len(stock_data) == 0:
            st.error("No data available for the symbol. Please enter a valid symbol.")
            return

        st.write("Stock Data:")
        st.write(stock_data)

        # آموزش مدل LSTM
        model = train_lstm(stock_data)

        # پیش‌بینی با استفاده از مدل LSTM
        prediction = predict_lstm(model, stock_data)

        st.write("Prediction:")
        st.write(prediction)

        # پیش‌بینی روند بازار برای تعداد روزهای مشخص شده
        future_dates = pd.date_range(start=stock_data.index[-1], periods=days, closed='right')
        future_data = pd.DataFrame(index=future_dates, columns=stock_data.columns)

        # تکمیل داده‌های آینده با استفاده از مدل پیش‌بینی
        # ...

        st.write("Future Prediction:")
        st.write(future_data)

        # نمایش نمودارها
        if click_counter > 0:
            plot_stock_data(stock_data, future_data)


if __name__ == "__main__":
    main()

